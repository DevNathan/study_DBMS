SELECT * FROM TBL_USER;
SELECT * FROM TBL_POST;
SELECT * FROM TBL_REPLY;

/*게시글 전체 정보와 작성자 아이디 조회*/
SELECT P.*, U.USER_ID FROM TBL_POST P
INNER JOIN TBL_USER U
ON P.USER_ID = U.ID;

/*댓글 조회와 작성자 정보 모두 조회*/
SELECT R.REPLY_CONTENT, U.* FROM TBL_REPLY R
INNER JOIN TBL_USER U
ON R.USER_ID = U.ID
ORDER BY U.ID;

UPDATE TBL_REPLY
SET REPLY_CONTENT = '댓글 안녕!'
WHERE ID = 10;

/*댓글 내용 중 "안녕"이 포함된 댓글의 게시글 제목과 내용 조회*/

SELECT P.*, R.REPLY_CONTENT FROM TBL_REPLY R
INNER JOIN TBL_POST P
ON REPLY_CONTENT LIKE '%안녕%' AND R.POST_ID = P.ID;


/*게시글 별 댓글 수가 가장 많은 게시글 정보와 작성자 정보 조회*/

SELECT P.ID, P.POST_TITLE, P.POST_CONTENT, U.USER_ID FROM TBL_REPLY R
INNER JOIN TBL_POST P
ON R.POST_ID = P.ID
INNER JOIN TBL_USER U
ON R.USER_ID = U.ID
GROUP BY P.ID, P.POST_TITLE, P.POST_CONTENT, U.USER_ID
ORDER BY COUNT(R.ID) DESC;

SELECT * FROM TBL_POST
WHERE ID =
(
	SELECT POST_ID
	FROM TBL_REPLY
	GROUP BY POST_ID
	HAVING COUNT(ID) IN
	(
		SELECT MAX(REPLY_COUNT) FROM
		(
			SELECT POST_ID, COUNT(ID) REPLY_COUNT
			FROM TBL_REPLY
			GROUP BY POST_ID
		)
	)
);


SELECT ROWNUM, P.* FROM TBL_POST P;


/*체험학습*/

CREATE SEQUENCE SEQ_PARENT;

CREATE TABLE TBL_PARENT(
   ID NUMBER CONSTRAINT PK_PARENT PRIMARY KEY,
   PARENT_NAME VARCHAR2(1000) NOT NULL,
   PARENT_AGE NUMBER,
   PARENT_ADDRESS VARCHAR2(1000) NOT NULL,
   PARENT_PHONE VARCHAR2(1000) NOT NULL UNIQUE,
   PARENT_GENDER VARCHAR2(1000) NOT NULL
);

CREATE SEQUENCE SEQ_CHILD;

CREATE TABLE TBL_CHILD(
   ID NUMBER CONSTRAINT PK_CHILD PRIMARY KEY,
   CHILD_NAME VARCHAR2(1000) NOT NULL,
   CHILD_AGE NUMBER,
   CHILD_GENDER VARCHAR2(1000) NOT NULL,
   PARENT_ID NUMBER,
   CONSTRAINT FK_CHILD_PARENT FOREIGN KEY(PARENT_ID)
   REFERENCES TBL_PARENT(ID)
);

CREATE SEQUENCE SEQ_FIELD_TRIP;

CREATE TABLE TBL_FIELD_TRIP(
   ID NUMBER CONSTRAINT PK_FIELD_TRIP PRIMARY KEY,
   FIELD_TRIP_TITLE VARCHAR2(1000),
   FIELD_TRIP_CONTENT VARCHAR2(1000),
   FIELD_TRIP_NUMBER NUMBER
);

CREATE TABLE TBL_FIELD_TRIP_FILE(
   ID NUMBER CONSTRAINT PK_FIELD_TRIP_FILE PRIMARY KEY,
   FILE_ORIGINAL_NAME VARCHAR2(1000) NOT NULL,
   FILE_SYSTEM_NAME VARCHAR2(1000) NOT NULL,
   FILE_POSITION VARCHAR2(100),
   FIELD_TRIP_ID NUMBER,
   CONSTRAINT FK_FIELD_TRIP_FILE_FIELD_TRIP FOREIGN KEY(FIELD_TRIP_ID)
   REFERENCES TBL_FIELD_TRIP(ID)
);

CREATE SEQUENCE SEQ_APPLY;

CREATE TABLE TBL_APPLY(
   ID NUMBER CONSTRAINT PK_APPLY PRIMARY KEY,
   CHILD_ID NUMBER,
   FIELD_TRIP_ID NUMBER,
   CONSTRAINT FK_APPLY_CHILD FOREIGN KEY(CHILD_ID)
   REFERENCES TBL_CHILD(ID),
   CONSTRAINT FK_APPLY_FIELD_TRIP FOREIGN KEY(FIELD_TRIP_ID)
   REFERENCES TBL_FIELD_TRIP(ID)
);

/*부모 테이블*/
INSERT INTO TBL_PARENT(ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER)
VALUES(SEQ_PARENT.NEXTVAL, '한동석', '40', '경기도 남양주', '01012341234', '남자');
INSERT INTO TBL_PARENT(ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER)
VALUES(SEQ_PARENT.NEXTVAL, '홍길동', '50', '서울시 강남구', '01055556666', '여자');
INSERT INTO TBL_PARENT(ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER)
VALUES(SEQ_PARENT.NEXTVAL, '이순신', '55', '서울시 강남구', '01077778888', '여자');

SELECT * FROM TBL_PARENT;

/*아이 테이블*/
INSERT INTO TBL_CHILD(ID, CHILD_NAME, CHILD_AGE, CHILD_GENDER, PARENT_ID)
VALUES(SEQ_CHILD.NEXTVAL, '김철수', 4, '남자', 61);
INSERT INTO TBL_CHILD(ID, CHILD_NAME, CHILD_AGE, CHILD_GENDER, PARENT_ID)
VALUES(SEQ_CHILD.NEXTVAL, '김훈이', 5, '남자', 62);
INSERT INTO TBL_CHILD(ID, CHILD_NAME, CHILD_AGE, CHILD_GENDER, PARENT_ID)
VALUES(SEQ_CHILD.NEXTVAL, '이유리', 7, '여자', 61);
INSERT INTO TBL_CHILD(ID, CHILD_NAME, CHILD_AGE, CHILD_GENDER, PARENT_ID)
VALUES(SEQ_CHILD.NEXTVAL, '김사자', 4, '남자', 63);
INSERT INTO TBL_CHILD(ID, CHILD_NAME, CHILD_AGE, CHILD_GENDER, PARENT_ID)
VALUES(SEQ_CHILD.NEXTVAL, '김영희', 4, '여자', 63);

SELECT * FROM TBL_CHILD;

/*체험학습 테이블*/
INSERT INTO TBL_FIELD_TRIP(ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, FIELD_TRIP_NUMBER)
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '매미 잡기 체험학습', '매미 잡으러 떠나자!', 5);
INSERT INTO TBL_FIELD_TRIP(ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, FIELD_TRIP_NUMBER)
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '메뚜기 때려 잡기 체험학습', '메뚜기 다 잡자!', 50);
INSERT INTO TBL_FIELD_TRIP(ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, FIELD_TRIP_NUMBER)
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '물놀이 체험학습', '한강 수영장으로 퐁당!', 20);
INSERT INTO TBL_FIELD_TRIP(ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, FIELD_TRIP_NUMBER)
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '블루베리 채집 체험학습', '맛있어 블루베리 냠냠!', 25);
INSERT INTO TBL_FIELD_TRIP(ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, FIELD_TRIP_NUMBER)
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '코딩 체험학습', '나도 빌게이츠!', 20);

SELECT * FROM TBL_FIELD_TRIP;

DELETE FROM TBL_FIELD_TRIP
WHERE ID=25;

/*신청하기*/
INSERT INTO TBL_APPLY(ID, CHILD_ID, FIELD_TRIP_ID)
VALUES(SEQ_APPLY.NEXTVAL, 1, 21);
INSERT INTO TBL_APPLY(ID, CHILD_ID, FIELD_TRIP_ID)
VALUES(SEQ_APPLY.NEXTVAL, 2, 21);
INSERT INTO TBL_APPLY(ID, CHILD_ID, FIELD_TRIP_ID)
VALUES(SEQ_APPLY.NEXTVAL, 3, 22);
INSERT INTO TBL_APPLY(ID, CHILD_ID, FIELD_TRIP_ID)
VALUES(SEQ_APPLY.NEXTVAL, 4, 23);
INSERT INTO TBL_APPLY(ID, CHILD_ID, FIELD_TRIP_ID)
VALUES(SEQ_APPLY.NEXTVAL, 4, 25);
INSERT INTO TBL_APPLY(ID, CHILD_ID, FIELD_TRIP_ID)
VALUES(SEQ_APPLY.NEXTVAL, 5, 25);
INSERT INTO TBL_APPLY(ID, CHILD_ID, FIELD_TRIP_ID)
VALUES(SEQ_APPLY.NEXTVAL, 5, 24);
INSERT INTO TBL_APPLY(ID, CHILD_ID, FIELD_TRIP_ID)
VALUES(SEQ_APPLY.NEXTVAL, 5, 24);
INSERT INTO TBL_APPLY(ID, CHILD_ID, FIELD_TRIP_ID)
VALUES(SEQ_APPLY.NEXTVAL, 5, 23);

SELECT * FROM TBL_APPLY;

/*매미 체험학습에 신청한 아이의 전체 정보*/
SELECT C.*, FT.FIELD_TRIP_TITLE FROM TBL_FIELD_TRIP FT
INNER JOIN TBL_APPLY A
ON FT.FIELD_TRIP_TITLE LIKE '%매미%' AND FT.ID = A.FIELD_TRIP_ID
INNER JOIN TBL_CHILD C
ON C.ID = A.CHILD_ID;

SELECT C.*
FROM TBL_CHILD C
WHERE C.ID IN
(
	SELECT A.ID
	FROM TBL_APPLY A
	INNER JOIN TBL_FIELD_TRIP FT
	ON A.FIELD_TRIP_ID = FT.ID
	WHERE FT.FIELD_TRIP_TITLE LIKE '%매미%'
);

/*체험학습을 2개 이상 신청한 아이의 정보와 부모의 정보 모두 조회*/

--SELECT C.*, P.*
--FROM TBL_CHILD C
--INNER JOIN TBL_PARENT P 
--ON C.PARENT_ID = P.ID
--WHERE C.ID IN (
--    SELECT CHILD_ID
--    FROM TBL_APPLY
--    GROUP BY CHILD_ID
--    HAVING COUNT(DISTINCT FIELD_TRIP_ID) >= 2
--);

SELECT C.*, P.*
FROM TBL_CHILD C
INNER JOIN TBL_PARENT P
ON C.PARENT_ID = P.ID
WHERE C.ID IN
(
	SELECT CHILD_ID
	FROM TBL_APPLY A
	GROUP BY CHILD_ID
	HAVING COUNT(A.FIELD_TRIP_ID) >= 2
);

SELECT C.*, P.*
FROM TBL_CHILD C
INNER JOIN TBL_PARENT P
ON C.PARENT_ID = P.ID
WHERE C.ID IN
(
	SELECT A.CHILD_ID 
	FROM TBL_APPLY A
	GROUP BY A.CHILD_ID 
	HAVING COUNT(A.FIELD_TRIP_ID) >= 2
);

SELECT FIELD_TRIP_ID, COUNT(CHILD_ID) FROM TBL_APPLY
GROUP BY FIELD_TRIP_ID
HAVING COUNT(CHILD_ID) >= 2;

SELECT * FROM TBL_PARENT P
INNER JOIN
(
   SELECT * FROM TBL_CHILD
   WHERE ID IN
   (
      SELECT CHILD_ID FROM TBL_APPLY
      GROUP BY CHILD_ID
      HAVING COUNT(FIELD_TRIP_ID) >= 2
   )
) C
ON P.ID = C.PARENT_ID;

/*참가자 수가 가장 적은 체험학습의 제목과 내용 조회*/
SELECT FT.FIELD_TRIP_TITLE, FT.FIELD_TRIP_CONTENT
FROM TBL_FIELD_TRIP FT
INNER JOIN TBL_APPLY A
ON FT.ID = A.FIELD_TRIP_ID
GROUP BY FT.FIELD_TRIP_TITLE, FT.FIELD_TRIP_CONTENT
HAVING COUNT(A.ID) = (
    SELECT MIN(COUNT(ID))
    FROM TBL_APPLY A
    GROUP BY A.ID
);

SELECT FT.FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT
FROM TBL_FIELD_TRIP FT
INNER JOIN TBL_APPLY A ON FT.ID = A.FIELD_TRIP_ID
GROUP BY FT.FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT
HAVING COUNT(A.ID) = (
	SELECT MIN(COUNT(A.ID))
	FROM TBL_APPLY A
	GROUP BY A.ID 
);

/*
 * 평균 참가자 수보다 적은 체험학습의 제목과 내용조회
 * */

SELECT FT.FIELD_TRIP_TITLE, FT.FIELD_TRIP_CONTENT
FROM TBL_FIELD_TRIP FT
JOIN (
   SELECT FIELD_TRIP_ID, COUNT(*) AS PARTICIPANT_COUNT
   FROM TBL_APPLY
   GROUP BY FIELD_TRIP_ID
) A ON A.FIELD_TRIP_ID = FT.ID
WHERE A.PARTICIPANT_COUNT < (
   SELECT AVG(PARTICIPANT_COUNT)
   FROM (
      SELECT FIELD_TRIP_ID, COUNT(*) AS PARTICIPANT_COUNT
      FROM TBL_APPLY
      GROUP BY FIELD_TRIP_ID
   )
);



